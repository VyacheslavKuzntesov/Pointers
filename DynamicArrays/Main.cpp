#include<iostream>
using namespace std;

void FillRand(int arr[], const int n);
void Print(int arr[], const int n);

void main()
{
	setlocale(LC_ALL, "");
	//Динамические массивы
	/*
		Динамическим называется массив размер которого может быть задан во время выполнения программы.
		Предварительно этот размер можно вычислить или вести с клавиатуры размер динамического массива можно задать целочисленным переменным значением
		Чтобы обявить динамический массив нужно объявить указатель и выделить память следующим образом:
	*/
	int n;   //размер массива
	cout << "Введите размер массива: "; cin >> n;
	int* arr = new int[n]; 

	FillRand(arr, n);
	Print(arr, n);

	//Обращаться к элементам массива можно 
	//for (int i = 0; i < n; i++)
	//{
	//	//Используя арифметику указателей и оператор разыменования
	//	*(arr + i) = rand() % 100;
	//}
	//for (int i = 0; i < n; i++)
	//{
	//	//или же через оператор индексирования[]
	//	cout << arr[i] << "\t";
	//}

	delete[] arr;
}

void FillRand(int arr[], const int n) 
{
	for (int i = 0; i < n; i++)
	{
		//Используя арифметику указателей и оператор разыменования
		*(arr + i) = rand() % 100;
	}
}

void Print(int arr[], const int n)
{
	for (int i = 0; i < n; i++)
	{
		//или же через оператор индексирования[]
		cout << arr[i] << "\t";
	}
	cout << endl;
}

/*
	Чтобы объявить динамический массив нужно выделить память след образом int* arr = new int[n];
	Оператор new выделяет непрерывную область памяти для n элементов типа int и возвращает адрес выделенной памяти этот адрес мы присваиваем указателю arr
	Вотличии от статического массива который хранится в статической памяти(stack) динамический массив хранится в динамической памяти(heap) 
	Heap(куча) - куча свободной оперативной памяти в ОС когда оператор new выделяет память он фактически запрашивает её у Операционной Системе если непрерывный блок памяти опред кол памяти есть у ОС то она её выделяет в противном случае может возникнуть ошибка на этапе выполнения
*/

/*
	Обращение к элементам динамического массива
	К элементам динамического массива можно обращатся точно также как к элементам статического массива используя арифметику указ и оператор разыменования(*(arr + i) = rand() % 100;) или же через оператор индексирования[]
	Динамический массив также можно передавать в функцию как и статические массивы, при этом функция не сможет отличить статический массив от динамического
*/

/*
	После того как массив уже не нужен его нужно удалить это делает оператор delete[] 
	Оператор delete удаляет массив освобождает занимаемую им память и возвращает её обратно ОС
	Если только выделять память и не возвращать её ОС то рано или поздно свободная оперативная память закончится что привидёт к аварийному завершению нашей программы с потерей данных по этому операторов delete должно быть ровно столько сколько операторов new
*/